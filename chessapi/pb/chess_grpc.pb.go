// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: proto/chess.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChessApiClient is the client API for ChessApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChessApiClient interface {
	MakeMove(ctx context.Context, in *MakeMoveRequest, opts ...grpc.CallOption) (*MakeMoveResponse, error)
	NewGame(ctx context.Context, in *NewGameRequest, opts ...grpc.CallOption) (*NewGameResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type chessApiClient struct {
	cc grpc.ClientConnInterface
}

func NewChessApiClient(cc grpc.ClientConnInterface) ChessApiClient {
	return &chessApiClient{cc}
}

func (c *chessApiClient) MakeMove(ctx context.Context, in *MakeMoveRequest, opts ...grpc.CallOption) (*MakeMoveResponse, error) {
	out := new(MakeMoveResponse)
	err := c.cc.Invoke(ctx, "/pb.ChessApi/MakeMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessApiClient) NewGame(ctx context.Context, in *NewGameRequest, opts ...grpc.CallOption) (*NewGameResponse, error) {
	out := new(NewGameResponse)
	err := c.cc.Invoke(ctx, "/pb.ChessApi/NewGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessApiClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/pb.ChessApi/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChessApiServer is the server API for ChessApi service.
// All implementations must embed UnimplementedChessApiServer
// for forward compatibility
type ChessApiServer interface {
	MakeMove(context.Context, *MakeMoveRequest) (*MakeMoveResponse, error)
	NewGame(context.Context, *NewGameRequest) (*NewGameResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedChessApiServer()
}

// UnimplementedChessApiServer must be embedded to have forward compatible implementations.
type UnimplementedChessApiServer struct {
}

func (UnimplementedChessApiServer) MakeMove(context.Context, *MakeMoveRequest) (*MakeMoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeMove not implemented")
}
func (UnimplementedChessApiServer) NewGame(context.Context, *NewGameRequest) (*NewGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGame not implemented")
}
func (UnimplementedChessApiServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedChessApiServer) mustEmbedUnimplementedChessApiServer() {}

// UnsafeChessApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChessApiServer will
// result in compilation errors.
type UnsafeChessApiServer interface {
	mustEmbedUnimplementedChessApiServer()
}

func RegisterChessApiServer(s grpc.ServiceRegistrar, srv ChessApiServer) {
	s.RegisterService(&ChessApi_ServiceDesc, srv)
}

func _ChessApi_MakeMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessApiServer).MakeMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChessApi/MakeMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessApiServer).MakeMove(ctx, req.(*MakeMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChessApi_NewGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessApiServer).NewGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChessApi/NewGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessApiServer).NewGame(ctx, req.(*NewGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChessApi_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessApiServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ChessApi/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessApiServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChessApi_ServiceDesc is the grpc.ServiceDesc for ChessApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChessApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChessApi",
	HandlerType: (*ChessApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeMove",
			Handler:    _ChessApi_MakeMove_Handler,
		},
		{
			MethodName: "NewGame",
			Handler:    _ChessApi_NewGame_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ChessApi_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chess.proto",
}
